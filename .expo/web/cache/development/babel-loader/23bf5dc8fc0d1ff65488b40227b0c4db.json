{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded2 = [\"style\", \"lightColor\", \"darkColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport DefaultText from \"react-native-web/dist/exports/Text\";\nimport DefaultView from \"react-native-web/dist/exports/View\";\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useThemeColor(props, colorName) {\n  var theme = useColorScheme();\n  var colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\nexport function Text(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded);\n\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return _jsx(DefaultText, _objectSpread({\n    style: [{\n      color: color\n    }, style]\n  }, otherProps));\n}\nexport function View(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded2);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return _jsx(DefaultView, _objectSpread({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps));\n}","map":{"version":3,"sources":["/Users/marktausch/prog/mini-timer/components/Themed.tsx"],"names":["Colors","useColorScheme","useThemeColor","props","colorName","theme","colorFromProps","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor"],"mappings":";;;;;;;;;;;AAOA,OAAOA,MAAP;AACA,OAAOC,cAAP;;AAEA,OAAO,SAASC,aAAT,CACLC,KADK,EAELC,SAFK,EAGL;AACA,MAAMC,KAAK,GAAGJ,cAAc,EAA5B;AACA,MAAMK,cAAc,GAAGH,KAAK,CAACE,KAAD,CAA5B;;AAEA,MAAIC,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO;AACL,WAAON,MAAM,CAACK,KAAD,CAAN,CAAcD,SAAd,CAAP;AACD;AACF;AAUD,OAAO,SAASG,IAAT,CAAcJ,KAAd,EAAgC;AACrC,MAAQK,KAAR,GAAwDL,KAAxD,CAAQK,KAAR;AAAA,MAAeC,UAAf,GAAwDN,KAAxD,CAAeM,UAAf;AAAA,MAA2BC,SAA3B,GAAwDP,KAAxD,CAA2BO,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDR,KAAxD;;AACA,MAAMS,KAAK,GAAGV,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AAEA,SAAO,KAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAAD,EAAYJ,KAAZ;AAApB,KAA4CG,UAA5C,EAAP;AACD;AAED,OAAO,SAASI,IAAT,CAAcZ,KAAd,EAAgC;AACrC,MAAQK,KAAR,GAAwDL,KAAxD,CAAQK,KAAR;AAAA,MAAeC,UAAf,GAAwDN,KAAxD,CAAeM,UAAf;AAAA,MAA2BC,SAA3B,GAAwDP,KAAxD,CAA2BO,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDR,KAAxD;;AACA,MAAMa,eAAe,GAAGd,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,KAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEM,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBR,KAAtB;AAApB,KAAsDG,UAAtD,EAAP;AACD","sourcesContent":["/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n"]},"metadata":{},"sourceType":"module"}